{
    "sourceFile": "src/pages/ITSM/Releasemanage/Querylist.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1645491501652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1645491501652,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'dva';\r\nimport moment from 'moment';\r\nimport router from 'umi/router';\r\nimport { Card, Row, Col, Form, Input, Select, Button, DatePicker, Table, message, Tooltip } from 'antd';\r\nimport { PageHeaderWrapper } from '@ant-design/pro-layout';\r\nimport { DownOutlined, UpOutlined, AlertTwoTone } from '@ant-design/icons';\r\nimport DictLower from '@/components/SysDict/DictLower';\r\nimport { exportReleaseOrder } from './services/api';\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 6 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 18 },\r\n  },\r\n};\r\n\r\nfunction Querylist(props) {\r\n  const pagetitle = props.route.name;\r\n  const {\r\n    form: { getFieldDecorator, resetFields, setFieldsValue, getFieldsValue },\r\n    loading,\r\n    list,\r\n    dispatch,\r\n    location,\r\n  } = props;\r\n  const [paginations, setPageinations] = useState({ current: 1, pageSize: 15 });\r\n  const [expand, setExpand] = useState(false);\r\n  const [selectdata, setSelectData] = useState('');\r\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n  const [selectedRecords, setSelectedRecords] = useState([]);\r\n\r\n  // 缓存页签查询条件\r\n  const [tabrecord, setTabRecord] = useState({});\r\n  const searchrecord = { releaseNo: '', releaseStatus: '' };\r\n  let cacheinfo = {};\r\n  cacheinfo = location.state && location.state.cacheinfo ? location.state.cacheinfo : searchrecord;\r\n\r\n  // 查询\r\n  const searchdata = (values, page, size) => {\r\n    dispatch({\r\n      type: 'releaseview/fetchlist',\r\n      payload: {\r\n        ...values,\r\n        beginTime: values.beginTime ? moment(values.beginTime).format('YYYY-MM-DD HH:mm:ss') : '',\r\n        endTime: values.endTime ? moment(values.endTime).format('YYYY-MM-DD HH:mm:ss') : '',\r\n        pageSize: size,\r\n        pageIndex: page,\r\n      },\r\n    });\r\n    setTabRecord({\r\n      ...values,\r\n      beginTime: values.beginTime ? moment(values.beginTime).format('X') : '',\r\n      endTime: values.endTime ? moment(values.endTime).format('X') : '',\r\n    });\r\n  };\r\n\r\n\r\n  const handleSearch = () => {\r\n    setPageinations({\r\n      ...paginations,\r\n      current: 1,\r\n    });\r\n    const values = getFieldsValue();\r\n    searchdata(values, paginations.current, paginations.pageSize);\r\n  };\r\n\r\n  // 重置\r\n  const handleReset = () => {\r\n    router.push({\r\n      pathname: `/ITSM/releasemanage/plan/query`,\r\n      query: { pathpush: true },\r\n      state: { cach: false, }\r\n    });\r\n    resetFields();\r\n    searchdata(searchrecord, 1, 15);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.state) {\r\n      if (location.state.cache) {\r\n        // 传表单数据到页签\r\n        dispatch({\r\n          type: 'viewcache/gettabstate',\r\n          payload: {\r\n            cacheinfo: {\r\n              ...tabrecord,\r\n              paginations,\r\n              expand,\r\n              key: 'release',\r\n            },\r\n            tabid: sessionStorage.getItem('tabid')\r\n          },\r\n        });\r\n      };\r\n      // 点击菜单刷新\r\n      if (location.state.reset) {\r\n        handleReset()\r\n      };\r\n      // 标签切回设置初始值\r\n      if (location.state.cacheinfo) {\r\n        const { current, pageSize } = location.state.cacheinfo.paginations;\r\n        setExpand(location.state.cacheinfo.expand);\r\n        setPageinations({ ...paginations, current, pageSize })\r\n      };\r\n    }\r\n  }, [location.state]);\r\n\r\n  // 获取数据\r\n  useEffect(() => {\r\n    if (cacheinfo) {\r\n      const values = getFieldsValue();\r\n      const current = location.state?.cacheinfo?.paginations?.current || paginations.current;\r\n      const pageSize = location.state?.cacheinfo?.paginations?.pageSize || paginations.pageSize;\r\n      searchdata(values, current, pageSize);\r\n    }\r\n    return () => {\r\n      setSelectData([]);\r\n      setExpand(false);\r\n    };\r\n  }, []);\r\n\r\n  //  下载\r\n  const download = () => {\r\n    const val = getFieldsValue();\r\n    const formval = {\r\n      ...val,\r\n      beginTime: val.beginTime ? moment(val.beginTime).format('YYYY-MM-DD HH:mm:ss') : '',\r\n      endTime: val.endTime ? moment(val.endTime).format('YYYY-MM-DD HH:mm:ss') : '',\r\n    };\r\n    const releaseNos = selectedRecords.length > 0 && selectedRecords.map(item => {\r\n      return item.releaseNo\r\n    })\r\n    const values = { ...formval, userid: '', releaseNos: releaseNos.length > 0 ? releaseNos.toString() : '' };\r\n    exportReleaseOrder(values).then(res => {\r\n      if (res) {\r\n        const filename = `发布查询_${moment().format('YYYY-MM-DD HH:mm')}.xls`;\r\n        const blob = new Blob([res]);\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = filename;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n      } else {\r\n        message.error('下载失败')\r\n      }\r\n    });\r\n  };\r\n\r\n  const onShowSizeChange = (page, size) => {\r\n    const values = getFieldsValue();\r\n    searchdata(values, 1, size);\r\n    setPageinations({\r\n      ...paginations,\r\n      current: 1,\r\n      pageSize: size,\r\n    });\r\n  };\r\n\r\n  const changePage = page => {\r\n    const values = getFieldsValue();\r\n    searchdata(values, page, paginations.pageSize);\r\n    setPageinations({\r\n      ...paginations,\r\n      current: page,\r\n    });\r\n  };\r\n\r\n  const pagination = {\r\n    showSizeChanger: true,\r\n    onShowSizeChange: (page, size) => onShowSizeChange(page, size),\r\n    current: paginations.current,\r\n    pageSize: paginations.pageSize,\r\n    total: list.total,\r\n    showTotal: total => `总共  ${total}  条记录`,\r\n    onChange: page => changePage(page),\r\n  };\r\n\r\n  const onSelectChange = (RowKeys, record) => {\r\n    setSelectedRowKeys(RowKeys);\r\n    setSelectedRecords(record);\r\n  };\r\n\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: (key, record) => onSelectChange(key, record),\r\n  };\r\n\r\n  const getTypebyId = key => {\r\n    if (selectdata.ischange) {\r\n      return selectdata.arr.filter(item => item.key === key)[0].children;\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const typemap = getTypebyId(460);       // 发布类型\r\n  const unitmap = getTypebyId(1052);       // 责任单位\r\n  const statumap = getTypebyId(469);       // 处理环节\r\n\r\n  const columns = [\r\n    {\r\n      title: '发布编号',\r\n      dataIndex: 'releaseNo',\r\n      key: 'releaseNo',\r\n      fixed: 'left',\r\n      render: (text, record) => {\r\n        const handleClick = () => {\r\n          dispatch({\r\n            type: 'viewcache/gettabstate',\r\n            payload: {\r\n              cacheinfo: {\r\n                ...tabrecord,\r\n                paginations,\r\n                expand,\r\n                key: 'release',\r\n              },\r\n              tabid: sessionStorage.getItem('tabid')\r\n            },\r\n          });\r\n          router.push({\r\n            pathname: `/ITSM/releasemanage/plan/query/details`,\r\n            query: {\r\n              Id: record.releaseNo,\r\n              taskName: record.taskName,\r\n            },\r\n            state: {\r\n              dynamicpath: true,\r\n              menuDesc: '发布工单详情',\r\n            }\r\n          });\r\n        };\r\n        return (<a onClick={handleClick}>{text}</a>);\r\n      },\r\n      sorter: (a, b) => a.releaseNo.localeCompare(b.releaseNo),\r\n    },\r\n    // {\r\n    //   title: '合并单号',\r\n    //   dataIndex: 'mergeNo',\r\n    //   key: 'mergeNo',\r\n    //   render: (text, record) => {\r\n    //     return (<>{(record.taskName === '版本管理员审核' || record.taskName === '科室负责人审核' || record.taskName === '中心领导审核') ? text : ''}</>)\r\n    //   }\r\n    // },\r\n    {\r\n      title: '当前处理环节',\r\n      dataIndex: 'taskName',\r\n      key: 'taskName',\r\n      sorter: (a, b) => a.taskName.localeCompare(b.taskName),\r\n    },\r\n    {\r\n      title: '超时状态',\r\n      dataIndex: 'timeoutStatus',\r\n      key: 'timeoutStatus',\r\n      sorter: (a, b) => a.timeoutStatus.localeCompare(b.timeoutStatus),\r\n      render: (text) => {\r\n        const blubnap = new Map([\r\n          ['未超时', <AlertTwoTone twoToneColor=\"#52C41A\" />],\r\n          ['即将超时', <AlertTwoTone twoToneColor=\"orange\" />],\r\n          ['已超时', <AlertTwoTone twoToneColor=\"red\" />]\r\n        ]);\r\n        const colormap = new Map([\r\n          ['未超时', '#52C41A'],\r\n          ['即将超时', 'orange'],\r\n          ['已超时', 'red']\r\n        ]);\r\n        return (\r\n          <><span style={{ fontSize: '1.4em', marginRight: 8 }}>{blubnap.get(text)}</span>\r\n            <span style={{ color: colormap.get(text) }}>{text}</span>\r\n          </>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      title: '发布类型',\r\n      dataIndex: 'releaseType',\r\n      key: 'releaseType',\r\n      width: 200,\r\n      sorter: (a, b) => a.releaseType.localeCompare(b.releaseType),\r\n    },\r\n    {\r\n      title: '责任单位',\r\n      dataIndex: 'dutyUnit',\r\n      key: 'dutyUnit',\r\n      sorter: (a, b) => a.dutyUnit.localeCompare(b.dutyUnit),\r\n    },\r\n    {\r\n      title: '出厂测试登记人',\r\n      dataIndex: 'registerUser',\r\n      key: 'registerUser',\r\n      sorter: (a, b) => a.registerUser.localeCompare(b.registerUser),\r\n    },\r\n    {\r\n      title: '当前处理人',\r\n      dataIndex: 'assignee',\r\n      key: 'assignee',\r\n      sorter: (a, b) => a.assignee.localeCompare(b.assignee),\r\n      with: 250,\r\n      onCell: () => {\r\n        return {\r\n          style: {\r\n            maxWidth: 250,\r\n            overflow: 'hidden',\r\n            whiteSpace: 'nowrap',\r\n            textOverflow: 'ellipsis',\r\n            cursor: 'pointer'\r\n          }\r\n        }\r\n      },\r\n      render: (text) => <Tooltip placement='topLeft' title={text}>{text}</Tooltip>\r\n    },\r\n    {\r\n      title: '发送人',\r\n      dataIndex: 'sender',\r\n      key: 'sender',\r\n      sorter: (a, b) => a.sender.localeCompare(b.sender),\r\n    },\r\n    {\r\n      title: '发送时间',\r\n      dataIndex: 'sendTime',\r\n      key: 'sendTime',\r\n      sorter: (a, b) => a.sendTime.localeCompare(b.sendTime),\r\n    },\r\n  ];\r\n\r\n  const extra = (<>\r\n    <Button type=\"primary\" onClick={() => handleSearch()}>查 询</Button>\r\n    <Button style={{ marginLeft: 8 }} onClick={() => handleReset()}>重 置</Button>\r\n    <Button\r\n      style={{ marginLeft: 8 }}\r\n      type=\"link\"\r\n      onClick={() => {\r\n        setExpand(!expand);\r\n        cacheinfo.expand = !expand;\r\n      }}\r\n    >\r\n      {expand ? (<>关 闭 <UpOutlined /></>) : (<>展 开 <DownOutlined /></>)}\r\n    </Button></>\r\n  )\r\n\r\n  const setTableHeight = () => {\r\n    let height = 500;\r\n    // 最小兼容1600的全屏显示器\r\n    const clientHeight = window.document?.body?.clientHeight;\r\n    if (clientHeight > 750) {\r\n      if (expand) {\r\n        height = clientHeight - 536\r\n      } else {\r\n        height = clientHeight - 420\r\n      }\r\n    }\r\n    return height\r\n  };\r\n\r\n  return (\r\n    <PageHeaderWrapper title={pagetitle}>\r\n      <DictLower\r\n        typeid=\"443\"\r\n        ChangeSelectdata={newvalue => setSelectData(newvalue)}\r\n        style={{ display: 'none' }}\r\n      />\r\n      <Card bodyStyle={{ paddingBottom: 0 }}>\r\n        <Row gutter={24}>\r\n          <Form {...formItemLayout} onSubmit={handleSearch}>\r\n            <Col span={8}>\r\n              <Form.Item label=\"发布编号\">\r\n                {getFieldDecorator('releaseNo', {\r\n                  initialValue: cacheinfo.releaseNo,\r\n                })(<Input placeholder=\"请输入\" allowClear />)}\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Form.Item label=\"当前处理环节\">\r\n                {getFieldDecorator('releaseStatus', {\r\n                  initialValue: cacheinfo.releaseStatus,\r\n                })(\r\n                  <Select placeholder=\"请选择\" allowClear>\r\n                    {statumap.map(obj => (\r\n                      <Option key={obj.key} value={obj.title}>\r\n                        {obj.title}\r\n                      </Option>\r\n                    ))}\r\n                  </Select>,\r\n                )}\r\n              </Form.Item>\r\n            </Col>\r\n            {(expand || cacheinfo.expand) && (\r\n              <>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"当前处理人\">\r\n                    {getFieldDecorator('assignee', {\r\n                      initialValue: cacheinfo.assignee,\r\n                    })(<Input placeholder=\"请输入\" allowClear />)}\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"责任单位\">\r\n                    {getFieldDecorator('dutyUnit', {\r\n                      initialValue: cacheinfo.dutyUnit,\r\n                    })(\r\n                      <Select placeholder=\"请选择\" allowClear>\r\n                        {unitmap.map(obj => (\r\n                          <Option key={obj.key} value={obj.title}>\r\n                            {obj.title}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                    )}\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"发布类型\">\r\n                    {getFieldDecorator('releaseType', {\r\n                      initialValue: cacheinfo.releaseType,\r\n                    })(\r\n                      <Select placeholder=\"请选择\" allowClear>\r\n                        {typemap.map(obj => (\r\n                          <Option key={obj.key} value={obj.title}>\r\n                            {obj.title}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>,\r\n                    )}\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"出厂测试登记人\">\r\n                    {getFieldDecorator('register', {\r\n                      initialValue: cacheinfo.register,\r\n                    })(<Input placeholder=\"请输入\" allowClear />)}\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"发送人\">\r\n                    {getFieldDecorator('sender', {\r\n                      initialValue: '',\r\n                    })(<Input placeholder=\"请输入\" allowClear />)}\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item label=\"发送时间\">\r\n                    <div style={{ display: 'inline-block', width: 'calc(50% - 12px)' }}>\r\n                      {getFieldDecorator('beginTime', {\r\n                        initialValue: cacheinfo.beginTime ? moment(cacheinfo.beginTime * 1000) : '',\r\n                      })(\r\n                        <DatePicker\r\n                          showTime={{\r\n                            hideDisabledOptions: true,\r\n                            defaultValue: moment('00:00:00', 'HH:mm:ss'),\r\n                          }}\r\n                          placeholder=\"开始时间\"\r\n                          format='YYYY-MM-DD HH:mm:ss'\r\n                          style={{ minWidth: 120, width: '100%' }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                    <span style={{ display: 'inline-block', width: '24px', textAlign: 'center' }}>-</span>\r\n                    <div style={{ display: 'inline-block', width: 'calc(50% - 12px)' }}>\r\n                      {getFieldDecorator('endTime', {\r\n                        initialValue: cacheinfo.endTime ? moment(cacheinfo.endTime * 1000) : '',\r\n                      })(\r\n                        <DatePicker\r\n                          showTime={{\r\n                            hideDisabledOptions: true,\r\n                            defaultValue: moment('23:59:59', 'HH:mm:ss'),\r\n                          }}\r\n                          placeholder=\"结束时间\"\r\n                          format='YYYY-MM-DD HH:mm:ss'\r\n                          style={{ minWidth: 120, width: '100%' }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </Form.Item>\r\n                </Col>\r\n              </>\r\n            )}\r\n            <Col span={8} style={{ marginTop: 4, paddingLeft: 48 }}>{extra}</Col>\r\n          </Form>\r\n        </Row>\r\n        <div>\r\n          <Button type=\"primary\" onClick={() => download()} style={{ marginRight: 8 }}>导出数据</Button >\r\n        </div>\r\n        < Table\r\n          loading={loading}\r\n          columns={columns}\r\n          dataSource={list.records}\r\n          pagination={pagination}\r\n          rowSelection={rowSelection}\r\n          rowKey={(_, index) => index.toString()}\r\n          scroll={{ y: setTableHeight() }}\r\n        />\r\n      </Card>\r\n    </PageHeaderWrapper>\r\n  );\r\n}\r\n\r\nexport default Form.create({})(\r\n  connect(({ releaseview, loading }) => ({\r\n    list: releaseview.list,\r\n    loading: loading.models.releaseview,\r\n  }))(Querylist),\r\n);\r\n"
        }
    ]
}